{"version":3,"sources":["Camera.js","Cropper.js","Stitcher.js","ImageMenu.js","ImageList.js","Album.js","BodyPartSelector.js","App.js","serviceWorker.js","index.js"],"names":["Camera","setVideoStreamMetadata","e","_this","setState","videoWidth","nativeEvent","target","videoHeight","console","log","state","showCamera","video","document","getElementById","navigator","mediaDevices","getUserMedia","audio","facingMode","width","height","aspectRatio","then","stream","srcObject","catch","err","takePicture","canvas","context","getContext","drawImage","saveAsPNG","imageDataURL","toDataURL","props","finishedTakingPicture","this","getVideoTracks","forEach","track","stop","react_default","a","createElement","StyledCamera","className","Tooltip","title","IconButton","id","onClick","cancelCamera","variant","ArrowBackIos_default","onLoadedData","playsInline","autoPlay","muted","Button","color","hidden","alt","Component","styled","div","attrs","_templateObject","Editor","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_cropperReady","cropperInstance","refs","cropper","handleButtonClick","head","dataURL","getBodyPart","greatestHeight","getData","body","getNewGreatestHeight","legs","finishedCropping","getCroppedCanvas","contenderHeight","currentHeight","buttonText","StyledEditor","cancelCropping","react_cropper_default","ref","src","viewMode","dragMode","ready","movable","scalable","zoomable","Cropper_templateObject","Stitcher","cropRect","getMinimumBoundingRect","getObjects","canvasObjects","topLeft","bottomRight","i","length","objBRect","getBoundingRect","fabric","Point","left","top","x","y","multiplier","finishedStitching","browserWindowHeight","Math","max","documentElement","clientHeight","window","innerHeight","browserWindowWidth","clientWidth","innerWidth","fabricCanvas","Canvas","allowTouchScrolling","interactive","fabricImageOptions","hasRotatingPoint","lockSkewingX","lockSkewingY","calculatedScale","bodyParts","scaleFactor","min","Image","fromURL","img","scale","set","add","StyledStitcher","cancelStitcher","Stitcher_templateObject","ImageMenu","_React$useState","React","useState","_React$useState2","slicedToArray","anchorEl","setAnchorEl","handleClose","StyledImageMenu","aria-label","aria-controls","aria-haspopup","event","currentTarget","size","MoreVert_default","Menu","keepMounted","open","Boolean","onClose","MenuItem","imageKey","parentNode","handleDeleteImg","ImageMenu_templateObject","ImageList","handleDeleteImage","imageItems","images","map","keyValuePairs","imageHTML","type","stitchedImageDataURL","originalImageDataURL","key","src_ImageMenu","Fragment","Album","localforage","removeItem","imagesAfterDelete","filter","keyValue","storeNumImgs","error","number","setNumOriginalsInDatabase","_this2","imageArray","iterate","value","_iterationNumber","push","StyledAlbum","src_ImageList","Album_templateObject","BodyPartSelector","handleSelectBodyParts","_callee","selectedHeadImgID","selectedBodyImgID","selectedLegsImgID","headImg","bodyImg","legsImg","headObject","bodyObject","legsObject","regenerator_default","wrap","_context","prev","next","querySelector","getItem","sent","finishedSelecting","slidesToShowSetting","sliderSettings","dots","arrows","infinite","speed","slidesToShow","centerMode","swipeToSlide","focusOnSelect","nextArrow","ArrowRight_default","fontSize","prevArrow","ArrowLeft_default","responsive","breakpoint","settings","StyledBodyPartSelector","cancelBodyPartSelector","lib_default","assign","afterChange","afterChangeHead","BodyPartSelector_templateObject","App","handleStartCameraButtonClick","handleConnectBodyPartsButtonClick","showBodyPartSelector","showFrontPage","view","showCropper","showStitcher","storeOriginalPicture","PNGimage","storeStitchedPicture","setItem","Date","now","storeBodyParts","numOriginalsInDatabase","viewComponent","connectBodyPartsButton","react","Divider","src_Album","src_Camera","Cropper","src_Stitcher","src_BodyPartSelector","StyledApp","App_templateObject","location","hostname","match","ReactDOM","render","src_App","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.2de1e80b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nclass Camera extends Component {\r\n  componentDidMount() {\r\n    this.showCamera();\r\n  }\r\n\r\n  setVideoStreamMetadata = e => {\r\n    this.setState(\r\n      {\r\n        videoWidth: e.nativeEvent.target.videoWidth,\r\n        videoHeight: e.nativeEvent.target.videoHeight\r\n      },\r\n      () => {\r\n        console.log(\r\n          \"Video stream has width: \" +\r\n            this.state.videoWidth +\r\n            \", height: \" +\r\n            this.state.videoHeight\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  showCamera = () => {\r\n    let video = document.getElementById(\"cameraStreamView\");\r\n    let constraints = {\r\n      audio: false,\r\n      video: {\r\n        facingMode: \"environment\",\r\n        width: 1920,\r\n        height: 1080,\r\n        aspectRatio: 1.777777778\r\n      }\r\n    };\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then(stream => {\r\n        // video element is showing the camera stream\r\n        video.srcObject = stream;\r\n      })\r\n      .catch(err => {\r\n        console.log(\"It seems you don't have a camera\");\r\n      });\r\n  };\r\n\r\n  takePicture = () => {\r\n    // Initialize\r\n    let canvas = document.getElementById(\"hiddenCanvas\");\r\n    let context = canvas.getContext(\"2d\");\r\n    let video = document.getElementById(\"cameraStreamView\");\r\n\r\n    // Set canvas the same size as video inputstream\r\n    canvas.width = this.state.videoWidth;\r\n    canvas.height = this.state.videoHeight;\r\n    // Draw image on canvas\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    this.saveAsPNG(canvas);\r\n  };\r\n\r\n  /**\r\n   * Save the picture in PNG-format\r\n   * @param {*} canvas The canvas already containing the picture\r\n   */\r\n  saveAsPNG = canvas => {\r\n    // Get an image dataURL from the canvas\r\n    /*     canvas.toBlob(blob => {\r\n      var imageDataURL = URL.createObjectURL(blob);\r\n      console.log(imageDataURL)\r\n      this.props.storeOriginalPicture(imageDataURL);\r\n    }); */\r\n\r\n    let imageDataURL = canvas.toDataURL();\r\n    this.props.finishedTakingPicture(imageDataURL);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (document.getElementById(\"cameraStreamView\").srcObject != null) {\r\n      document\r\n        .getElementById(\"cameraStreamView\")\r\n        .srcObject.getVideoTracks()\r\n        .forEach(track => {\r\n          track.stop();\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCamera>\r\n        <div className=\"imageContainer\">\r\n          <Tooltip title=\"Back to front-page\">\r\n            <IconButton\r\n              id=\"cancelCameraButton\"\r\n              className=\"cancelButton\"\r\n              onClick={this.props.cancelCamera}\r\n              variant=\"contained\"\r\n            >\r\n              <BackIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <video\r\n            onLoadedData={this.setVideoStreamMetadata}\r\n            playsInline\r\n            autoPlay\r\n            muted\r\n            id=\"cameraStreamView\"\r\n            className=\"imageView\"\r\n          />\r\n          <div\r\n            id=\"takePictureButtonContainer\"\r\n            className=\"actionButtonContainer\"\r\n          >\r\n            <Button\r\n              onClick={this.takePicture}\r\n              className=\"actionButton\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Take picture\r\n            </Button>\r\n          </div>\r\n          <canvas id=\"hiddenCanvas\" hidden />\r\n          <img id=\"takenPictureFrame\" alt=\"\" />\r\n        </div>\r\n      </StyledCamera>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledCamera = styled.div.attrs({ id: \"StyledCamera\" })`\r\n  #takenPictureFrame {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nexport default Camera;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ReactCropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Editor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      head: {\r\n        dataURL: null,\r\n        height: null,\r\n        width: null\r\n      },\r\n      body: {\r\n        dataURL: null,\r\n        height: null,\r\n        width: null\r\n      },\r\n      legs: {\r\n        dataURL: null,\r\n        height: null,\r\n        width: null\r\n      },\r\n      greatestHeight: null\r\n    };\r\n  }\r\n\r\n  _cropperReady = () => {\r\n    this.cropperInstance = this.refs.cropper;\r\n    //console.log(this.cropperInstance);\r\n  };\r\n\r\n  handleButtonClick = () => {\r\n    if (this.state.head.dataURL === null) {\r\n      // Store head\r\n      this.setState({\r\n        head: this.getBodyPart(),\r\n        greatestHeight: this.cropperInstance.getData().height\r\n      });\r\n    } else if (this.state.body.dataURL === null) {\r\n      // Store body\r\n      this.setState({\r\n        body: this.getBodyPart(),\r\n        greatestHeight: this.getNewGreatestHeight(\r\n          this.cropperInstance.getData().height,\r\n          this.state.greatestHeight\r\n        )\r\n      });\r\n    } else if (this.state.legs.dataURL === null) {\r\n      // Store legs\r\n      this.setState({\r\n        legs: this.getBodyPart(),\r\n        greatestHeight: this.getNewGreatestHeight(\r\n          this.cropperInstance.getData().height,\r\n          this.state.greatestHeight\r\n        )\r\n      });\r\n    } else {\r\n      // Done cropping\r\n      this.props.finishedCropping({\r\n        head: this.state.head,\r\n        body: this.state.body,\r\n        legs: this.state.legs,\r\n        greatestHeight: this.state.greatestHeight\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the data URL of the current crop box\r\n   */\r\n  getBodyPart() {\r\n    return {\r\n      dataURL: this.cropperInstance.getCroppedCanvas().toDataURL(),\r\n      height: this.cropperInstance.getData().height,\r\n      width: this.cropperInstance.getData().width\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the greatest of contender and current height\r\n   */\r\n  getNewGreatestHeight(contenderHeight, currentHeight) {\r\n    if (contenderHeight > currentHeight) {\r\n      return contenderHeight;\r\n    } else {\r\n      return currentHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let buttonText = \"\";\r\n    if (this.state.head.dataURL === null) {\r\n      buttonText = \"Select head\";\r\n    } else if (this.state.body.dataURL === null) {\r\n      buttonText = \"Select body\";\r\n    } else if (this.state.legs.dataURL === null) {\r\n      buttonText = \"Select legs\";\r\n    } else {\r\n      buttonText = \"Done\";\r\n    }\r\n\r\n    return (\r\n      <StyledEditor>\r\n        <div className=\"imageContainer\">\r\n          <IconButton\r\n            id=\"cancelCameraButton\"\r\n            className=\"cancelButton\"\r\n            onClick={this.props.cancelCropping}\r\n            variant=\"contained\"\r\n          >\r\n            <BackIcon />\r\n          </IconButton>\r\n          <div id=\"cropPictureButtonContainer\" className=\"actionButtonContainer\">\r\n            <Button\r\n              onClick={this.handleButtonClick}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\"actionButton\"\r\n            >\r\n              {buttonText}\r\n            </Button>\r\n          </div>\r\n          <ReactCropper\r\n            className=\"imageView\"\r\n            ref=\"cropper\"\r\n            src={this.props.imageDataURL}\r\n            viewMode={1}\r\n            dragMode=\"move\"\r\n            ready={this._cropperReady}\r\n            // preview=\"#preview\"\r\n            movable={false}\r\n            scalable={false}\r\n            zoomable={false}\r\n          />\r\n        </div>\r\n      </StyledEditor>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledEditor = styled.div.attrs({ id: \"StyledEditor\" })`\r\n  #cropPictureButtonContainer {\r\n    z-index: 1;\r\n    pointer-events: none;\r\n  }\r\n\r\n  #cropPictureButtonContainer button {\r\n    pointer-events: all;\r\n  }\r\n\r\n  #preview {\r\n    width: 50px;\r\n    height: 50px;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nexport default Editor;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { fabric } from \"fabric/dist/fabric\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nclass Stitcher extends Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let browserWindowHeight = Math.max(\r\n      document.documentElement.clientHeight,\r\n      window.innerHeight || 0\r\n    );\r\n\r\n    let browserWindowWidth = Math.max(\r\n      document.documentElement.clientWidth,\r\n      window.innerWidth || 0\r\n    );\r\n\r\n    //TODO: recalculate height and width on browser windows resize?\r\n    const fabricCanvas = new window.fabric.Canvas(\"fabricCanvas\", {\r\n      allowTouchScrolling: true,\r\n      interactive: true,\r\n      height: browserWindowHeight,\r\n      width: browserWindowWidth\r\n    });\r\n\r\n    const fabricImageOptions = {\r\n      hasRotatingPoint: false,\r\n      lockSkewingX: true, // Cannot skew by holding shift\r\n      lockSkewingY: true // Cannot skew by holding shift\r\n    };\r\n\r\n    // We know that (x * bodyHeight) / canvasHeight should be <= 0.4, solve for x\r\n    let calculatedScale =\r\n      (browserWindowHeight * 0.4) / this.props.bodyParts.greatestHeight;\r\n    let scaleFactor = Math.min(calculatedScale, 1);\r\n    console.log(\r\n      \"browserWindowHeight: \" + browserWindowHeight,\r\n      \"greatestHeight\" + this.props.bodyParts.greatestHeight\r\n    );\r\n    console.log(\"Set scale to: \" + scaleFactor);\r\n\r\n    // add head\r\n    fabric.Image.fromURL(\r\n      this.props.bodyParts.head.dataURL,\r\n      img => {\r\n        img.scale(scaleFactor).set({ top: 0 });\r\n        fabricCanvas.add(img);\r\n      },\r\n      fabricImageOptions\r\n    );\r\n\r\n    // add body\r\n    fabric.Image.fromURL(\r\n      this.props.bodyParts.body.dataURL,\r\n      img => {\r\n        img.scale(scaleFactor).set({ top: 200 });\r\n        fabricCanvas.add(img);\r\n      },\r\n      fabricImageOptions\r\n    );\r\n\r\n    // add legs\r\n    fabric.Image.fromURL(\r\n      this.props.bodyParts.legs.dataURL,\r\n      img => {\r\n        img.scale(scaleFactor).set({ top: 400 });\r\n        fabricCanvas.add(img);\r\n      },\r\n      fabricImageOptions\r\n    );\r\n\r\n    this.canvas = fabricCanvas;\r\n  }\r\n\r\n  handleButtonClick = () => {\r\n    let cropRect = this.getMinimumBoundingRect(this.canvas.getObjects());\r\n    this.saveAsPNG(this.canvas, cropRect);\r\n  };\r\n\r\n  /**\r\n   * Get the bounding box that contains all given objects.\r\n   * Returns a bounding box defined by a topLeft and bottomRight Point.\r\n   * @param canvasObjects An array of fabric.Object\r\n   */\r\n  getMinimumBoundingRect = canvasObjects => {\r\n    let topLeft = null;\r\n    let bottomRight = null;\r\n    for (let i = 0; i < canvasObjects.length; i++) {\r\n      // Get bounding rect of current object\r\n      let objBRect = canvasObjects[i].getBoundingRect();\r\n      if (topLeft === null) {\r\n        // Set topLeft instantly if it has no existing value\r\n        topLeft = new fabric.Point(objBRect.left, objBRect.top);\r\n      } else {\r\n        if (topLeft.x > objBRect.left) {\r\n          // update x of topLeft with smallest possible value\r\n          topLeft.x = objBRect.left;\r\n        }\r\n        if (topLeft.y > objBRect.top) {\r\n          // update y of topLeft with smallest possible value\r\n          topLeft.y = objBRect.top;\r\n        }\r\n      }\r\n      if (bottomRight === null) {\r\n        // Set bottomRight instantly if it has no existing value\r\n        bottomRight = new fabric.Point(\r\n          objBRect.left + objBRect.width,\r\n          objBRect.top + objBRect.height\r\n        );\r\n      } else {\r\n        if (bottomRight.x < objBRect.left + objBRect.width) {\r\n          // update x of bottomRight with largest possible value\r\n          bottomRight.x = objBRect.left + objBRect.width;\r\n        }\r\n        if (bottomRight.y < objBRect.top + objBRect.height) {\r\n          // update y of bottomRight with largest possible value\r\n          bottomRight.y = objBRect.top + objBRect.height;\r\n        }\r\n      }\r\n    }\r\n    return { topLeft, bottomRight };\r\n  };\r\n\r\n  /**\r\n   * Save the picture in PNG-format. Allows for cropping with the cropRect.\r\n   * @param {fabric.Canvas} canvas The canvas already containing the picture\r\n   * @param {Object} cropRect A rect defined by a topLeft and bottomRight Point\r\n   */\r\n  saveAsPNG = (canvas, cropRect) => {\r\n    // Get an image dataURL from the canvas\r\n    var imageDataURL = canvas.toDataURL({\r\n      // Options\r\n      multiplier: 1, //TODO: check if this does something good to the quality\r\n      // following four is for cropping the image\r\n      left: cropRect.topLeft.x,\r\n      top: cropRect.topLeft.y,\r\n      width: cropRect.bottomRight.x - cropRect.topLeft.x,\r\n      height: cropRect.bottomRight.y - cropRect.topLeft.y\r\n    });\r\n    // Save\r\n    this.props.finishedStitching(imageDataURL);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledStitcher>\r\n        <Tooltip title=\"Back to selecting body parts\">\r\n          <IconButton\r\n            id=\"cancelStitcherButton\"\r\n            className=\"cancelButton\"\r\n            onClick={this.props.cancelStitcher}\r\n            variant=\"contained\"\r\n          >\r\n            <BackIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <canvas id=\"fabricCanvas\" />\r\n        <div\r\n          id=\"stitchPictureButtonContainer\"\r\n          className=\"actionButtonContainer\"\r\n        >\r\n          <Button\r\n            onClick={this.handleButtonClick}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\"actionButton\"\r\n          >\r\n            Finished stitching\r\n          </Button>\r\n        </div>\r\n      </StyledStitcher>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledStitcher = styled.div.attrs({ id: \"StyledStitcher\" })`\r\n  #fabricCanvas {\r\n    /* Is overrided */\r\n    width: 0px;\r\n    height: 0px;\r\n  }\r\n\r\n  #stitchPictureButtonContainer {\r\n    pointer-events: none;\r\n  }\r\n\r\n  #stitchPictureButtonContainer button {\r\n    pointer-events: all;\r\n  }\r\n`;\r\n\r\nexport default Stitcher;\r\n","import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport styled from \"styled-components\";\r\n\r\nfunction ImageMenu(props) {\r\n  // The below is a hook! it allows us to use state in functional components\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function handleDelete() {\r\n    // TODO: Confirm with dialog/alert before deleting\r\n    let imageKey = anchorEl.parentNode.parentNode.id + \"\";\r\n    setAnchorEl(null);\r\n    props.handleDeleteImg(imageKey);\r\n  }\r\n\r\n  return (\r\n    <StyledImageMenu>\r\n      <IconButton\r\n        aria-label=\"Options\"\r\n        aria-controls=\"image-menu\"\r\n        aria-haspopup=\"true\"\r\n        onClick={handleClick}\r\n        size=\"small\"\r\n        className=\"imageOptionButton\"\r\n      >\r\n        <MoreVertIcon />\r\n      </IconButton>\r\n      <Menu\r\n        id=\"image-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClose}>Save</MenuItem>\r\n        <MenuItem onClick={handleDelete}>Delete</MenuItem>\r\n      </Menu>\r\n    </StyledImageMenu>\r\n  );\r\n}\r\n\r\nexport default ImageMenu;\r\n\r\nconst StyledImageMenu = styled.div.attrs({ id: \"StyledImageMenu\" })`\r\n  .imageOptionButton {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n`;","import React from \"react\";\r\nimport ImageMenu from \"./ImageMenu\";\r\n\r\nfunction ImageList(props) {\r\n  const imageKVs = props.images;\r\n\r\n  function handleDeleteImage(imageKey){\r\n    props.handleDeleteImage(imageKey);\r\n  }\r\n\r\n  const imageItems = imageKVs.map(keyValuePairs => {\r\n\r\n    let imageHTML = null;\r\n    if (props.type === \"stitched\"){\r\n      imageHTML = <img src={keyValuePairs[1].stitchedImageDataURL} alt=\"stitched\" />\r\n    } else if (props.type === \"original\"){\r\n      imageHTML = <img src={keyValuePairs[1].originalImageDataURL} alt=\"stitched\" />\r\n    }\r\n\r\n    return (\r\n      <div className=\"imageBox\" key={keyValuePairs[0]} id={keyValuePairs[0]}>\r\n        <ImageMenu handleDeleteImg={handleDeleteImage}/>\r\n        {imageHTML}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <React.Fragment>{imageItems}</React.Fragment>;\r\n}\r\n\r\nexport default ImageList;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport ImageList from \"./ImageList\";\r\n\r\nimport localforage from \"localforage\";\r\n\r\nclass Album extends Component {\r\n  componentDidMount() {\r\n    // Get all images from db\r\n    let imageArray = [];\r\n    localforage\r\n      .iterate((value, key, _iterationNumber) => {\r\n        if (\r\n          this.props.type === \"stitched\" &&\r\n          value.stitchedImageDataURL != null\r\n        ) {\r\n          imageArray.push([key, value]);\r\n        } else if (\r\n          this.props.type === \"original\" &&\r\n          value.originalImageDataURL != null\r\n        ) {\r\n          imageArray.push([key, value]);\r\n        }\r\n      })\r\n      .then(() => {\r\n        if (imageArray.length > 0) {\r\n          this.setState({ images: imageArray }, () => {\r\n            this.storeNumImgs(imageArray.length);\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Delete image from database and keep Album state consistent\r\n   */\r\n  handleDeleteImage = imageKey => {\r\n    localforage\r\n      .removeItem(imageKey, () => {\r\n        let imagesAfterDelete = this.state.images.filter(keyValue => {\r\n          return keyValue[0] !== imageKey;\r\n        });\r\n        this.setState({ images: imagesAfterDelete }, () => {\r\n          this.storeNumImgs(imagesAfterDelete.length);\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Pass number of images to parent component\r\n   */\r\n  storeNumImgs = number => {\r\n    // If state exists\r\n    if (this.state && this.props.setNumOriginalsInDatabase) {\r\n      this.props.setNumOriginalsInDatabase(number);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledAlbum>\r\n        <h3>{this.props.title}</h3>\r\n        {this.state !== null ? (\r\n          <div id=\"imageBoxContainer\">\r\n            <ImageList\r\n              images={this.state.images}\r\n              type={this.props.type}\r\n              handleDeleteImage={this.handleDeleteImage}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <p>No images found</p>\r\n        )}\r\n      </StyledAlbum>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledAlbum = styled.div.attrs({ id: \"StyledAlbum\" })`\r\n  #imageBoxContainer {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n  }\r\n\r\n  .imageBox {\r\n    width: 10rem;\r\n    height: 10rem;\r\n    margin: 0.5em;\r\n    position: relative;\r\n  }\r\n\r\n  .imageBox img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: scale-down;\r\n    border: 1px solid grey;\r\n  }\r\n`;\r\n\r\nexport default Album;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport localforage from \"localforage\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ArrowRight from \"@material-ui/icons/ArrowRight\";\r\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nclass BodyPartSelector extends Component {\r\n  // TODO: Merge this function and the identical one in Album.js ?\r\n  componentDidMount() {\r\n    // Get all images from db\r\n    let imageArray = [];\r\n    localforage\r\n      .iterate((value, key, _iterationNumber) => {\r\n        if (value.originalImageDataURL != null) {\r\n          imageArray.push([key, value]);\r\n        }\r\n      })\r\n      .then(() => {\r\n        //console.log(\"Iteration through local db completed\");\r\n        if (imageArray.length > 0) {\r\n          this.setState({ images: imageArray });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleSelectBodyParts = async () => {\r\n    let selectedHeadImgID = document.querySelector(\r\n      \"#headSliderContainer .slick-center .imageBox\"\r\n    ).id;\r\n    let selectedBodyImgID = document.querySelector(\r\n      \"#bodySliderContainer .slick-center .imageBox\"\r\n    ).id;\r\n    let selectedLegsImgID = document.querySelector(\r\n      \"#legsSliderContainer .slick-center .imageBox\"\r\n    ).id;\r\n    let headImg = await localforage.getItem(selectedHeadImgID).catch(err => {\r\n      console.log(err);\r\n    });\r\n    let bodyImg = await localforage.getItem(selectedBodyImgID).catch(err => {\r\n      console.log(err);\r\n    });\r\n    let legsImg = await localforage.getItem(selectedLegsImgID).catch(err => {\r\n      console.log(err);\r\n    });\r\n    let headObject = headImg.bodyParts.head;\r\n    let bodyObject = bodyImg.bodyParts.body;\r\n    let legsObject = legsImg.bodyParts.legs;\r\n    let greatestHeight = Math.max(\r\n      headObject.height,\r\n      bodyObject.height,\r\n      legsObject.height\r\n    );\r\n    let bodyParts = {\r\n      head: headObject,\r\n      body: bodyObject,\r\n      legs: legsObject,\r\n      greatestHeight: greatestHeight\r\n    };\r\n    this.props.finishedSelecting(bodyParts);\r\n  };\r\n\r\n  render() {\r\n    // Handle React Slick doesn't work when there are less images than the slidesToShow setting\r\n    let slidesToShowSetting = 3;\r\n    if (\r\n      this.state !== null &&\r\n      this.state.images.length <= slidesToShowSetting\r\n    ) {\r\n      slidesToShowSetting = 1; // This is safe because one can only get here with more than one image\r\n    }\r\n\r\n    let sliderSettings = {\r\n      dots: true,\r\n      arrows: true,\r\n      infinite: true,\r\n      speed: 300,\r\n      slidesToShow: slidesToShowSetting,\r\n      centerMode: true,\r\n      swipeToSlide: true,\r\n      focusOnSelect: true,\r\n      nextArrow: <ArrowRight color=\"action\" fontSize=\"large\" />,\r\n      prevArrow: <ArrowLeft color=\"action\" fontSize=\"large\" />,\r\n      responsive: [\r\n        {\r\n          breakpoint: 415,\r\n          settings: {\r\n            slidesToShow: 1\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <StyledBodyPartSelector>\r\n        <Tooltip title=\"Back to front page\">\r\n          <IconButton\r\n            className=\"cancelButton\"\r\n            onClick={this.props.cancelBodyPartSelector}\r\n            variant=\"contained\"\r\n          >\r\n            <BackIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <h4>Select which body parts you want to mix</h4>\r\n        <div id=\"headSliderContainer\" className=\"sliderContainer\">\r\n          {this.state !== null ? (\r\n            <Slider {...sliderSettings} afterChange={this.afterChangeHead}>\r\n              {this.state.images.map(keyValuePairs => {\r\n                return (\r\n                  <div\r\n                    className=\"imageBox\"\r\n                    key={keyValuePairs[0]}\r\n                    id={keyValuePairs[0]}\r\n                  >\r\n                    <img\r\n                      src={keyValuePairs[1].bodyParts.head.dataURL}\r\n                      alt=\"stitched\"\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </Slider>\r\n          ) : (\r\n            <p>No images found</p>\r\n          )}\r\n        </div>\r\n        <div id=\"bodySliderContainer\" className=\"sliderContainer\">\r\n          {this.state !== null ? (\r\n            <Slider {...sliderSettings}>\r\n              {this.state.images.map(keyValuePairs => {\r\n                return (\r\n                  <div\r\n                    className=\"imageBox\"\r\n                    key={keyValuePairs[0]}\r\n                    id={keyValuePairs[0]}\r\n                  >\r\n                    <img\r\n                      src={keyValuePairs[1].bodyParts.body.dataURL}\r\n                      alt=\"stitched\"\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </Slider>\r\n          ) : (\r\n            <p>No images found</p>\r\n          )}\r\n        </div>\r\n        <div id=\"legsSliderContainer\" className=\"sliderContainer\">\r\n          {this.state !== null ? (\r\n            <Slider {...sliderSettings}>\r\n              {this.state.images.map(keyValuePairs => {\r\n                return (\r\n                  <div\r\n                    className=\"imageBox\"\r\n                    key={keyValuePairs[0]}\r\n                    id={keyValuePairs[0]}\r\n                  >\r\n                    <img\r\n                      src={keyValuePairs[1].bodyParts.legs.dataURL}\r\n                      alt=\"stitched\"\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </Slider>\r\n          ) : (\r\n            <p>No images found</p>\r\n          )}\r\n        </div>\r\n        <Tooltip title=\"Use the selected body parts\">\r\n          <Button\r\n            onClick={this.handleSelectBodyParts}\r\n            id=\"selectBodyPartsButton\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Continue\r\n          </Button>\r\n        </Tooltip>\r\n      </StyledBodyPartSelector>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BodyPartSelector;\r\n\r\nconst StyledBodyPartSelector = styled.div.attrs({\r\n  id: \"StyledBodyPartSelector\"\r\n})`\r\n  .slick-slide {\r\n    filter: saturate(50%);\r\n  }\r\n\r\n  .slick-center {\r\n    filter: saturate(100%);\r\n    transition: all 0.3s ease;\r\n    transform: scale(1.25);\r\n  }\r\n\r\n  .sliderContainer {\r\n    max-width: 500px;\r\n    /* Padding to allow for next and previous buttons */\r\n    padding-left: calc(1em + 25px);\r\n    padding-right: calc(1em + 25px);\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n  }\r\n\r\n  .slick-prev:hover,\r\n  .slick-prev:focus,\r\n  .slick-next:hover,\r\n  .slick-next:focus {\r\n    color: black;\r\n  }\r\n\r\n  #headSliderContainer {\r\n  }\r\n\r\n  #bodySliderContainer {\r\n    margin-top: 1em;\r\n  }\r\n\r\n  #legsSliderContainer {\r\n    margin-top: 1em;\r\n  }\r\n\r\n  #selectBodyPartsButton {\r\n    margin-top: 2.5em;\r\n  }\r\n\r\n  .imageBox {\r\n  }\r\n\r\n  .imageBox img {\r\n    width: calc(100% - 2em);\r\n    margin: 1em;\r\n    /* Extra top margin to allow image to grow */\r\n    margin-top: 2em;\r\n  }\r\n\r\n  h4 {\r\n    margin-top: 2em;\r\n  }\r\n`;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport localforage from \"localforage\";\r\n\r\nimport Camera from \"./Camera\";\r\nimport Cropper from \"./Cropper\";\r\nimport Stitcher from \"./Stitcher\";\r\nimport Album from \"./Album\";\r\nimport BodyPartSelector from \"./BodyPartSelector\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      view: \"app\", //should be \"app\"\r\n      numOriginalsInDatabase: null,\r\n      originalImageDataURL: null,\r\n      stitchedImageDataURL: null,\r\n      bodyParts: {\r\n        head: {\r\n          dataURL: null,\r\n          height: null,\r\n          width: null\r\n        },\r\n        body: {\r\n          dataURL: null,\r\n          height: null,\r\n          width: null\r\n        },\r\n        legs: {\r\n          dataURL: null,\r\n          height: null,\r\n          width: null\r\n        },\r\n        greatestHeight: null\r\n      }\r\n    };\r\n  }\r\n\r\n  handleStartCameraButtonClick = () => {\r\n    this.showCamera();\r\n  };\r\n\r\n  handleConnectBodyPartsButtonClick = () => {\r\n    this.showBodyPartSelector();\r\n  };\r\n\r\n  showFrontPage = () => {\r\n    this.setState({ view: \"app\" });\r\n  };\r\n\r\n  showCamera = () => {\r\n    this.setState({ view: \"camera\" });\r\n  };\r\n\r\n  showCropper = () => {\r\n    this.setState({ view: \"cropper\" });\r\n  };\r\n\r\n  showStitcher = bodyParts => {\r\n    this.setState({\r\n      bodyParts: bodyParts,\r\n      view: \"stitcher\"\r\n    });\r\n  };\r\n\r\n  showBodyPartSelector = () => {\r\n    this.setState({ view: \"bodyPartSelector\" });\r\n  };\r\n\r\n  /**\r\n   * Save a picture taken with camera\r\n   */\r\n  storeOriginalPicture = PNGimage => {\r\n    // Store image\r\n    this.setState({ originalImageDataURL: PNGimage }, () => {\r\n      // then show cropper\r\n      this.setState({ view: \"cropper\" });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Save a picture taken with camera\r\n   */\r\n  storeStitchedPicture = PNGimage => {\r\n    // Store stitched image\r\n    localforage\r\n      .setItem(Date.now() + \"\", {\r\n        stitchedImageDataURL: PNGimage\r\n      })\r\n      .then(() => {\r\n        // finally show front page again\r\n        this.setState({ view: \"app\" });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  storeBodyParts = bodyParts => {\r\n    // Store bodyParts images\r\n    this.setState({ bodyParts: bodyParts }, () => {\r\n      localforage\r\n        .setItem(Date.now() + \"\", {\r\n          originalImageDataURL: this.state.originalImageDataURL,\r\n          bodyParts: this.state.bodyParts\r\n        })\r\n        .then(() => {\r\n          // finally show front page again\r\n          this.setState({ view: \"app\" });\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  setNumOriginalsInDatabase = number => {\r\n    this.setState({ numOriginalsInDatabase: number });\r\n  };\r\n\r\n  render() {\r\n    // Show connectBodyPartsButton if there are enough images\r\n    let connectBodyPartsButton = null;\r\n    if (this.state.numOriginalsInDatabase > 1) {\r\n      connectBodyPartsButton = (\r\n        <Button\r\n          onClick={this.handleConnectBodyPartsButtonClick}\r\n          id=\"connectBodypartsButton\"\r\n          className=\"AppButtons\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Connect bodyparts!\r\n        </Button>\r\n      );\r\n    } else {\r\n      connectBodyPartsButton = (\r\n        <p>You need to take two pictures before partying</p>\r\n      );\r\n    }\r\n\r\n    // Show component based on state\r\n    let viewComponent;\r\n    if (this.state.view === \"app\") {\r\n      viewComponent = (\r\n        <Fragment>\r\n          <h1>Mix Max</h1>\r\n          <Button\r\n            onClick={this.handleStartCameraButtonClick}\r\n            id=\"startCameraButton\"\r\n            className=\"AppButtons\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Start camera\r\n          </Button>\r\n          <br />\r\n          {connectBodyPartsButton}\r\n          <Divider variant=\"middle\" />\r\n          <Album\r\n            title={\"Your exquisite corpse bodies\"}\r\n            type={\"stitched\"}\r\n          />\r\n          <Album\r\n            title={\"Your original photos\"}\r\n            type={\"original\"}\r\n            setNumOriginalsInDatabase={this.setNumOriginalsInDatabase}\r\n          />\r\n        </Fragment>\r\n      );\r\n    } else if (this.state.view === \"camera\") {\r\n      viewComponent = (\r\n        <Camera\r\n          className=\"yolo\"\r\n          cancelCamera={this.showFrontPage}\r\n          finishedTakingPicture={this.storeOriginalPicture}\r\n        />\r\n      );\r\n    } else if (this.state.view === \"cropper\") {\r\n      viewComponent = (\r\n        <Cropper\r\n          imageDataURL={this.state.originalImageDataURL}\r\n          cancelCropping={this.showCamera}\r\n          finishedCropping={this.storeBodyParts}\r\n        />\r\n      );\r\n    } else if (this.state.view === \"stitcher\") {\r\n      viewComponent = (\r\n        <Stitcher\r\n          bodyParts={this.state.bodyParts}\r\n          finishedStitching={this.storeStitchedPicture}\r\n          cancelStitcher={this.showBodyPartSelector}\r\n        />\r\n      );\r\n    } else if (this.state.view === \"bodyPartSelector\") {\r\n      viewComponent = (\r\n        <BodyPartSelector\r\n          cancelBodyPartSelector={this.showFrontPage}\r\n          finishedSelecting={this.showStitcher}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <StyledApp>\r\n        <div className=\"App\">{viewComponent}</div>\r\n      </StyledApp>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledApp = styled.div.attrs({ id: \"StyledApp\" })`\r\n  .App {\r\n    text-align: center;\r\n  }\r\n\r\n  .AppButtons {\r\n    margin-bottom: 2em;\r\n  }\r\n\r\n  .imageContainer {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n  }\r\n\r\n  .imageView {\r\n    object-fit: contain;\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n  }\r\n\r\n  .cancelButton {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    margin: 0.3em;\r\n  }\r\n\r\n  .actionButton {\r\n    margin-bottom: 2em;\r\n  }\r\n\r\n  .actionButtonContainer {\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}